## Regression with binary outcomes
## 
## Logistic regression
## 
##   This far we have used the `lm' function to fit our regression models.
##   `lm' is great, but limited in particular it only fits models for
##   continuous dependent variables. For categorical dependent variables we
##   can use the `glm()' function.

##   For these models we will use a different dataset, drawn from the
##   National Health Interview Survey. From the [CDC website]:

##         The National Health Interview Survey (NHIS) has monitored
##         the health of the nation since 1957. NHIS data on a broad
##         range of health topics are collected through personal
##         household interviews. For over 50 years, the U.S. Census
##         Bureau has been the data collection agent for the National
##         Health Interview Survey. Survey results have been
##         instrumental in providing data to track health status,
##         health care access, and progress toward achieving national
##         health objectives.

##   You changing directory and listing the files in the working directory


## Load library
library(ggplot2)
library(GGally)
library(dplyr)
library(tidyr)
library(scales)
library(RColorBrewer)
library(ggthemes)
library("effects")

##   Load the National Health Interview Survey data:

NH11 <- readRDS("NatHealth2011.rds")
labs <- attributes(NH11)$labels
#labs
View(NH11)
str(NH11)

##   [CDC website] http://www.cdc.gov/nchs/nhis.htm

## Logistic regression example
## 
##   Let's predict the probability of being diagnosed with hypertension
##   based on age, sex, sleep, and bmi

str(NH11$hypev) # check stucture of hypev
levels(NH11$hypev) # check levels of hypev

##  collapse all missing values to NA
NH11$hypev <- factor(NH11$hypev, levels=c("2 No", "1 Yes"))

##  run our regression model
hyp.out <- glm(hypev~age_p+sex+sleep+bmi, data=NH11, family="binomial")
coef(summary(hyp.out))
summary(hyp.out)


## Logistic regression coefficients
## 
##   Generalized linear models use link functions, so raw coefficients are
##   difficult to interpret. For example, the age coefficient of .06 in the
##   previous model tells us that for every one unit increase in age, the
##   log odds of hypertension diagnosis increases by 0.06. Since most of us
##   are not used to thinking in log odds this is not too helpful!

##   One solution is to transform the coefficients to make them easier to
##   interpret

hyp.out.tab <- coef(summary(hyp.out))
hyp.out.tab[, "Estimate"] <- exp(coef(hyp.out))
hyp.out.tab

## Generating predicted values
## 
##   In addition to transforming the log-odds produced by `glm' to odds, we
##   can use the `predict()' function to make direct statements about the
##   predictors in our model. For example, we can ask "How much more likely
##   is a 63 year old female to have hypertension compared to a 33 year old
##   female?".

# Create a dataset with predictors set at desired levels
predDat <- with(NH11,
                expand.grid(age_p = c(33, 63),
                            sex = "2 Female",
                            bmi = mean(bmi, na.rm = TRUE),
                            sleep = mean(sleep, na.rm = TRUE)))
#View(predDat)

# predict hypertension at those levels
cbind(predDat, predict(hyp.out, type = "response",
                       se.fit = TRUE, interval="confidence",
                       newdata = predDat))

##   This tells us that a 33 year old female has a 13% probability of
##   having been diagnosed with hypertension, while and 63 year old female
##   has a 48% probability of having been diagnosed.

## Packages for  computing and graphing predicted values
## 
##   Instead of doing all this ourselves, we can use the effects package to
##   compute quantities of interest for us (cf. the Zelig package).


plot(allEffects(hyp.out))




#############################################################################################
##
## Exercise: logistic regression
## 
##   Use the NH11 data set that we loaded earlier.

##   1. Use glm to conduct a logistic regression to predict ever worked
##      (everwrk) using age (age_p) and marital status (r_maritl).
##   2. Predict the probability of working for each level of marital
##      status.

##   Note that the data is not perfectly clean and ready to be modeled. You
##   will need to clean up at least some of the variables before fitting
##   the model.
###########################################################################################



## Determine the labels in these variables

labs <- attributes(NH11)$labels
labs

labs.everwrk <- attributes(NH11$everwrk)  
labs.everwrk

labs.r_maritl <- attributes(NH11$r_maritl) 
labs.r_maritl



##  collapse all missing values to NA
NH11$everwrk <- factor(NH11$everwrk, levels=c("2 No", "1 Yes"))

##  run our regression model   mracrpi2
everwrk.out <- glm(everwrk~age_p+r_maritl, data=NH11, family="binomial")
coef(summary(everwrk.out))
summary(everwrk.out)


## Transforming the Logistic regression coefficients to make them easier to
##  interpret (transforming the log-odds produced by `glm' to odds)
##   


everwrk.out.tab <- coef(summary(everwrk.out))
everwrk.out.tab[, "Estimate"] <- exp(coef(everwrk.out))
everwrk.out.tab


# Create a dataframe to predict the probability of working for each level of marital status.

predDat.everwrk <- data.frame(Effect("r_maritl", everwrk.out))
predDat.everwrk 

table(NH11$r_maritl) 
table(droplevels(NH11)$r_maritl)

plot(predDat.everwrk)

## This result tells us that a household with Married spouse has a 89% probability of ever having to work, 
## while married household without a spouse has 89% probability of ever having to work. 
## Similarly, probability of ever having to work for the othhers are as follows
## Widowed 81%, Divorced 94% , Separated 90%, Never married 85%, Living with partner 93% 
##  and Unknown marital status is 85% 



###########################################################################################
## Extra Exercise   


#############################################################################################
##
##   Use the NH11 data set that we loaded earlier.
##   1. Use glm to conduct a logistic regression to predict ever worked
##      (everwrk) using age (age_p), sex, race (mracrpi2) and marital status (r_maritl).
##   2. Predict the probability of working for each level of race

###########################################################################################

## Adding more attributes like to the logistic model 

## Determining the lables
labs.sex <- attributes(NH11$sex)  
labs.sex

labs.mracrpi2 <- attributes(NH11$mracrpi2) 
labs.mracrpi2


##  collapse all missing values to NA
NH11$everwrk <- factor(NH11$everwrk, levels=c("2 No", "1 Yes"))

##  run our regression model   #
everwrk.out2 <- glm(everwrk~age_p+sex+mracrpi2+r_maritl , data=NH11, family="binomial")
coef(summary(everwrk.out2))
summary(everwrk.out2)

##
## Transforming the Logistic regression coefficients to log-odds produced by `glm' to odds
##   


everwrk.out2.tab <- coef(summary(everwrk.out2))
everwrk.out2.tab[, "Estimate"] <- exp(coef(everwrk.out2))
everwrk.out2.tab


predDat.everwrk.age <- data.frame(Effect("age_p", everwrk.out2))
predDat.everwrk.age 


predDat.everwrk.sex <- data.frame(Effect("sex", everwrk.out2))
predDat.everwrk.sex 



predDat.everwrk.race <- data.frame(Effect("mracrpi2", everwrk.out2))
predDat.everwrk.race 


predDat.everwrk.status <- data.frame(Effect("r_maritl", everwrk.out2))
plot(predDat.everwrk.status) 







#############################################################################################
##
##   Use the NH11 data set that we loaded earlier.
##   1. Use multinom to conduct a multinormial regression to predict the probability of having diabetes (dibev)
##       using sex, Hispanic subgroup (hispan_i), Race (mracrpi2), Age (age_p), Body Mass Index (bmi) .
##   2. Predict the probability of working for each level of race

###########################################################################################
library(nnet)

## Viewing the attributes  
## Determining the lables
labs.dibev  <- attributes(NH11$dibev)  
labs.dibev 

labs.sex <- attributes(NH11$sex)  
labs.sex

labs.mracrpi2 <- attributes(NH11$mracrpi2) 
labs.mracrpi2

labs.bmi  <- attributes(NH11$bmi ) 
labs.bmi 

labs.hispan_i  <- attributes(NH11$hispan_i ) 
labs.hispan_i 

#View(NH11$hispan_i)

NH11.data <- subset(NH11, select = c("dibev", "age_p", "sex","mracrpi2","bmi","hispan_i" ))  #
#View(NH11.data)


##  reducing the levels of dibev
NH11.data$dibev <- factor(NH11.data$dibev, levels=c("1 Yes","2 No", "3 Borderline" ))

# - Assign a reference point in the categorical variable
NH11.data$dibev <- relevel(NH11.data$dibev, ref="1 Yes")


##  run our regression model   #
dibev.out <- multinom(dibev~age_p+sex+mracrpi2+bmi+hispan_i, data=NH11.data)
coef(summary(dibev.out))    
summary(dibev.out)


## Predict
predDat.dibev <- predict(dibev.out, type = "prob",
                         se.fit = TRUE, interval="confidence",
                         newdata = NH11.data)
#View(predDat.dibev)

# Create a dataset with predictors set at desired levels   
predDat.dibev2 <- with(NH11.data,
                       expand.grid(age_p = c(13, 23, 33, 43, 53, 63),  
                                   sex = "2 Female" ,
                                   mracrpi2 = "01 White", #"02 Black/African American"  ,
                                   hispan_i = "02 Mexican",
                                   bmi = mean(bmi, na.rm = TRUE)))


# predict dibetes at those levels
cbind(predDat.dibev2, predict(dibev.out, type = "prob",    
                              se.fit = TRUE, interval="confidence",
                              newdata = predDat.dibev2))




predDat.dibev.age <- data.frame(Effect("age_p", dibev.out))
predDat.dibev.age 


predDat.dibev.sex <- data.frame(Effect("sex", dibev.out))
predDat.dibev.sex 



predDat.dibev.race <- data.frame(Effect("mracrpi2", dibev.out))
predDat.dibev.race 


predDat.dibev.race2 <- data.frame(Effect("hispan_i", dibev.out))
plot(predDat.dibev.race2) 


predDat.dibev.bmi <- data.frame(Effect("bmi", dibev.out))
plot(predDat.dibev.bmi) 




plot(allEffects(dibev.out))
